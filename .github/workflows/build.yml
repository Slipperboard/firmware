# Workflow name displayed in GitHub Actions
name: CI
# Only run tasks for files that changed to save time

# Events that trigger this workflow
on:
  # React to pull request activity
  pull_request:
    # Run for these PR actions
    types: [opened, synchronize, reopened, closed]
  # Allow manual execution from the Actions UI
  workflow_dispatch:
  # A push to master does not trigger this workflow to avoid duplicate
  # runs when a pull request is merged. The closed pull_request event
  # above handles builds for merged PRs.

# All jobs start here
jobs:
  # Job to figure out what changed
  changes:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    outputs:
      firmware: ${{ steps.filter.outputs.firmware }}      # Did firmware files change?
      tests: ${{ steps.filter.outputs.tests }}            # Did test files change?
      markdown: ${{ steps.filter.outputs.markdown }}      # Did markdown files change?
      makefile: ${{ steps.filter.outputs.makefile }}      # Did the Makefile change?
      workflow: ${{ steps.filter.outputs.workflow }}      # Did this workflow file change?
      markdown_files: ${{ steps.filter.outputs.markdown_files }}  # List of changed markdown files
      makefile_files: ${{ steps.filter.outputs.makefile_files }}  # List of changed makefiles
      sanity_matrix: ${{ steps.matrix.outputs.matrix }}  # Tasks to run for sanity job
    steps:
      - uses: actions/checkout@v3  # Grab the repository contents
        with:
          fetch-depth: 0  # Fetch all history so path filtering works
      - id: filter  # Filter paths to see what changed
        uses: dorny/paths-filter@v2
        with:
          # Update this list when new directories are added
          filters: |
            firmware:
              - 'src/**'
              - 'include/**'
              - 'lib/**'
              - 'scripts/**'
              - 'platformio.ini'
              - 'Makefile'
              - 'diagram.json'
              - 'wokwi.toml'
            tests:
              - 'tests/**'
            markdown:
              - '**/*.md'
            makefile:
              - 'Makefile'
            workflow:
              - '.github/workflows/build.yml'  # Re-run CI when this file changes
      - id: matrix
        run: |  # Build a matrix of tasks to run
          python3 <<'EOF'
          import json, os
          tasks = []
          # Firmware or tests changed? Run format, lint and tidy checks
          if os.environ['FIRMWARE'] == 'true' or os.environ['TESTS'] == 'true':
              tasks.extend(["check-format", "lint", "cpplint", "tidy"])
          # Markdown changed? run markdown linter
          if os.environ['MARKDOWN'] == 'true':
              tasks.append("markdown-lint")
          # Makefile changed? run makefile linter
          if os.environ['MAKEFILE'] == 'true':
              if "makefile-lint" not in tasks:
                  tasks.append("makefile-lint")
          # Changes affecting build environment? ensure build compiles
          if (
              os.environ['FIRMWARE'] == 'true'
              or os.environ['MAKEFILE'] == 'true'
              or os.environ['WORKFLOW'] == 'true'
          ):
              if "env" not in tasks:
                  tasks.append("env")
          # Output the task matrix for the sanity job
          print(f"matrix={json.dumps(tasks)}", file=open(os.environ['GITHUB_OUTPUT'], 'a'))
          EOF
        env:
          # Force all tasks when a PR is merged, otherwise use filter output
          FIRMWARE: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 'true' || steps.filter.outputs.firmware }}
          TESTS: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 'true' || steps.filter.outputs.tests }}
          MARKDOWN: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 'true' || steps.filter.outputs.markdown }}
          MAKEFILE: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 'true' || steps.filter.outputs.makefile }}
          WORKFLOW: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 'true' || steps.filter.outputs.workflow }}

  commit-message-check:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate commit messages
        run: scripts/check_commit_prefix.py "${{ github.event.pull_request.base.sha }}"

  # Build the firmware
  build:
    needs: changes  # Wait for path filtering
    # Run when PR is merged or when relevant files change
    if: github.event.pull_request.merged == true || (((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.workflow == 'true') || (needs.changes.outputs.makefile == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true))
    runs-on: ubuntu-latest  # Use Ubuntu runner
    steps:
      - uses: actions/checkout@v3  # Checkout code again for build
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}  # Use merge commit when available
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Latest Python 3
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install Python packages
        run: uv pip install --system -r requirements.txt
      - name: Install tools
        run: bash scripts/install_apt_packages.sh clang-tidy cppcheck gcovr  # Lint and coverage helpers
      - name: Build firmware
        run: make build  # Compile the code
      - name: Wokwi config sanity
        run: make wokwi-sanity  # Check the simulator config

  # Run unit tests and collect coverage
  unit-tests:
    needs: changes
    # Run when PR is merged or when firmware/tests changed
    if: github.event.pull_request.merged == true || (((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.tests == 'true') || (needs.changes.outputs.workflow == 'true') || (needs.changes.outputs.makefile == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Allow all matrix jobs to run
      matrix:
        task: [test, coverage]  # Execute tests and coverage in parallel
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install Python packages
        run: uv pip install --system -r requirements.txt
      - name: Install tools
        run: bash scripts/install_apt_packages.sh gcovr  # Coverage reporter
      - name: Run ${{ matrix.task }}
        run: make ${{ matrix.task }}  # Execute the selected target

  # Perform formatting and lint sanity checks
  sanity:
    needs: changes
    # Run when PR is merged or when any relevant files change
    if: github.event.pull_request.merged == true || (((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.tests == 'true') || (needs.changes.outputs.markdown == 'true') || (needs.changes.outputs.makefile == 'true') || (needs.changes.outputs.workflow == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true))
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJSON(needs.changes.outputs.sanity_matrix) }}  # Tasks computed in the changes job
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install tools
        run: |  # Install linting tools for sanity checks
          bash scripts/install_apt_packages.sh cppcheck clang-format clang-tidy
          uv pip install --system -r requirements.txt
      - name: Run ${{ matrix.task }}
        run: |  # Execute the requested sanity task
          if [ "${{ matrix.task }}" = "markdown-lint" ]; then
            make markdown-lint FILES="${{ needs.changes.outputs.markdown_files }}"
          elif [ "${{ matrix.task }}" = "env" ]; then
            make env && make build
          else
            make ${{ matrix.task }}
          fi

