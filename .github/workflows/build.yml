name: CI
# Tasks run only for relevant changes to save resources

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      firmware: ${{ steps.filter.outputs.firmware }}
      tests: ${{ steps.filter.outputs.tests }}
      markdown: ${{ steps.filter.outputs.markdown }}
      makefile: ${{ steps.filter.outputs.makefile }}
      workflow: ${{ steps.filter.outputs.workflow }}
      markdown_files: ${{ steps.filter.outputs.markdown_files }}
      makefile_files: ${{ steps.filter.outputs.makefile_files }}
      sanity_matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: filter
        uses: dorny/paths-filter@v2
        with:
          # NOTE: Maintain this list with new directories so CI only runs needed tasks.
          # Maintainers: update filters when files move or new directories are added.
          filters: |
            firmware:
              - 'src/**'
              - 'include/**'
              - 'lib/**'
              - 'scripts/**'
              - 'platformio.ini'
              - 'Makefile'
              - 'diagram.json'
              - 'wokwi.toml'
            tests:
              - 'tests/**'
            markdown:
              - '**/*.md'
            makefile:
              - 'Makefile'
            workflow:
              - '.github/workflows/build.yml'  # CI logic also runs when this file changes
      - id: matrix
        run: |
          python3 <<'EOF'
          import json, os
          tasks = []
          if os.environ['FIRMWARE'] == 'true' or os.environ['TESTS'] == 'true':
              tasks.extend(["check-format", "lint", "cpplint", "tidy"])
          if os.environ['MARKDOWN'] == 'true':
              tasks.append("markdown-lint")
          if os.environ['MAKEFILE'] == 'true':
              if "makefile-lint" not in tasks:
                  tasks.append("makefile-lint")
          print(f"matrix={json.dumps(tasks)}", file=open(os.environ['GITHUB_OUTPUT'], 'a'))
          EOF
        env:
          FIRMWARE: ${{ steps.filter.outputs.firmware }}
          TESTS: ${{ steps.filter.outputs.tests }}
          MARKDOWN: ${{ steps.filter.outputs.markdown }}
          MAKEFILE: ${{ steps.filter.outputs.makefile }}

  build:
    needs: changes
    if: ((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.workflow == 'true') || (needs.changes.outputs.makefile == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO
        run: pip install --upgrade platformio
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y clang-tidy cppcheck gcovr
      - name: Build firmware
        run: make build
      - name: Wokwi config sanity
        run: make wokwi-sanity

  unit-tests:
    needs: changes
    if: ((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.tests == 'true') || (needs.changes.outputs.workflow == 'true') || (needs.changes.outputs.makefile == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [test, coverage]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PlatformIO
        run: pip install --upgrade platformio
      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y gcovr
      - name: Run ${{ matrix.task }}
        run: make ${{ matrix.task }}

  sanity:
    needs: changes
    if: ((needs.changes.outputs.firmware == 'true') || (needs.changes.outputs.tests == 'true') || (needs.changes.outputs.markdown == 'true') || (needs.changes.outputs.makefile == 'true') || (needs.changes.outputs.workflow == 'true')) && (github.event_name != 'pull_request' || github.event.action != 'closed' || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJSON(needs.changes.outputs.sanity_matrix) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y cppcheck clang-format clang-tidy
          pip install --user cpplint
      - name: Run ${{ matrix.task }}
        run: |
          if [ "${{ matrix.task }}" = "markdown-lint" ]; then
            make markdown-lint FILES="${{ needs.changes.outputs.markdown_files }}"
          else
            make ${{ matrix.task }}
          fi


