# Workflow name displayed in GitHub Actions
name: CI
# Run all tasks for every pull request

# Events that trigger this workflow
on:
  # React to pull request activity
  pull_request:
    # Run for these PR actions
    types: [opened, synchronize, reopened, closed]
  # Allow manual execution from the Actions UI
  workflow_dispatch:
  # A push to master does not trigger this workflow to avoid duplicate
  # runs when a pull request is merged. The closed pull_request event
  # above handles builds for merged PRs.

# All jobs start here
jobs:

  commit-message-check:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Validate commit messages
        run: scripts/check_commit_prefix.py "${{ github.event.pull_request.base.sha }}"

  # Build the firmware
  build:
    runs-on: ubuntu-latest  # Use Ubuntu runner
    steps:
      - uses: actions/checkout@v3  # Checkout code again for build
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}  # Use merge commit when available
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Latest Python 3
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install Python packages
        run: uv pip install --system -r requirements.txt
      - name: Install tools
        run: bash scripts/install_apt_packages.sh clang-tidy cppcheck gcovr  # Lint and coverage helpers
      - name: Build firmware
        run: make build  # Compile the code
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: .pio/build/esp32dev
          if-no-files-found: error

  # Verify Wokwi configuration using built firmware
  wokwi-sanity:
    needs: build
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Download firmware artifacts
        uses: actions/download-artifact@v4
        with:
          name: firmware
          path: .
      - name: Place firmware files
        run: |
          mkdir -p .pio/build/esp32dev
          mv firmware/esp32dev/firmware.* .pio/build/esp32dev/ 2>/dev/null || mv firmware.elf firmware.bin .pio/build/esp32dev/
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Run Wokwi config sanity
        run: make wokwi-sanity

  # Run unit tests and collect coverage
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Allow all matrix jobs to run
      matrix:
        task: [test, coverage]  # Execute tests and coverage in parallel
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install Python packages
        run: uv pip install --system -r requirements.txt
      - name: Install tools
        run: bash scripts/install_apt_packages.sh gcovr  # Coverage reporter
      - name: Run ${{ matrix.task }}
        run: make ${{ matrix.task }}  # Execute the selected target

  # Perform formatting and lint sanity checks
  sanity:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [check-format, lint, cpplint, tidy, docs-check, markdown-lint, makefile-lint, env]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install uv
        run: bash scripts/install_uv.sh
      - name: Install tools
        run: |  # Install linting tools for sanity checks
          bash scripts/install_apt_packages.sh cppcheck clang-format clang-tidy doxygen
          uv pip install --system -r requirements.txt
      - name: Run ${{ matrix.task }}
        run: |  # Execute the requested sanity task
          if [ "${{ matrix.task }}" = "markdown-lint" ]; then
            make markdown-lint
          elif [ "${{ matrix.task }}" = "env" ]; then
            make env && make build
          else
            make ${{ matrix.task }}
          fi

  close-issues:
    needs: [build]
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0
      - name: Close referenced issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 scripts/close_issues.py "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.merge_commit_sha }}"

