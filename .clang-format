# Use LLVM style as a base (common, minimal, and readable)
BasedOnStyle: LLVM # Start with LLVM defaults

# === Indentation and Line Width ===
IndentWidth: 4                   # Indent using 4 spaces per level
ColumnLimit: 120                # Maximum allowed line length before wrapping

# === Brace Formatting ===
BreakBeforeBraces: Custom       # Use custom brace wrapping instead of default style
BraceWrapping:                  # Control how braces are placed
  AfterClass: true              # Place opening brace of a class on a new line
  AfterControlStatement: false  # Place brace on the same line for control statements
  AfterEnum: true               # Place brace on a new line after enum declaration
  AfterFunction: true           # Place brace on a new line after function definition
  AfterNamespace: true          # Place brace on a new line after namespace
  AfterStruct: true             # Place brace on a new line after struct declaration
  AfterUnion: true              # Place brace on a new line after union declaration
  BeforeCatch: true             # Place `catch` on a new line after `try`
  BeforeElse: false             # Keep `else` on the same line as the closing brace
  SplitEmptyFunction: true      # Even empty functions get separate lines for braces
  SplitEmptyRecord: true        # Empty classes/structs/unions get braces on separate lines
  SplitEmptyNamespace: true     # Empty namespaces also use separate lines for braces

# === Short Constructs ===
AllowShortFunctionsOnASingleLine: None       # Never allow functions on a single line
AllowShortBlocksOnASingleLine: false         # Even short blocks like `{ return; }` are multiline
AllowShortIfStatementsOnASingleLine: false   # Always wrap if-statements
AllowShortLoopsOnASingleLine: false          # Always wrap for/while loops
AllowShortCaseLabelsOnASingleLine: false     # Always use multiline case labels

# === Access Modifier Formatting ===
AccessModifierOffset: 0          # Do not indent public/protected/private specifiers in classes

# === Pointer and Reference Formatting ===
PointerAlignment: Left           # Align `*` with type (e.g., `int* ptr`, not `int *ptr`)

# === Include Handling ===
SortIncludes: true               # Automatically sort `#include` statements
IncludeBlocks: Preserve          # Preserve blank lines between include blocks (e.g., system vs. local)
IncludeCategories:               # Define custom order for includes
  - Regex: '^<.*\.h>$'           # Match system includes like `<vector>` or `<string>`
    Priority: 1                  # Sort these first
  - Regex: '^".*"$'              # Match project/local includes like "myfile.h"
    Priority: 2                  # Sort these second

# === Whitespace Rules ===
SpaceBeforeParens: ControlStatements   # Add space before parens in control statements (`if (...)`)
SpaceAfterCStyleCast: true             # Require space after a C-style cast: `(int) x`
SpacesInParentheses: false             # No spaces inside regular parentheses
SpacesInSquareBrackets: false          # No spaces inside square brackets (`arr[0]`)
SpaceBeforeAssignmentOperators: true   # Add space around assignment and compound assignment operators

# === Constructor Initializer Formatting ===
BreakConstructorInitializers: BeforeColon      # Break line before the colon (`:`) in constructor initializers
ConstructorInitializerAllOnOneLineOrOnePerLine: true  # Force initializer list to be either all on one line or each on its own line

# === Function Call Formatting ===
AlignAfterOpenBracket: Align           # Align parameters or arguments after the opening bracket
BinPackArguments: false                # Do not put multiple function call arguments on the same line
BinPackParameters: false               # Do not pack multiple function parameters on the same line

# === Miscellaneous Formatting ===
InsertTrailingCommas: Wrapped          # Add trailing commas in multi-line lists for cleaner diffs
KeepEmptyLinesAtTheStartOfBlocks: false  # Remove empty lines at the start of code blocks
MaxEmptyLinesToKeep: 1                 # Allow at most one consecutive empty line

# === Comment and Namespace Enhancements ===
ReflowComments: true                   # Automatically wrap comments to fit within ColumnLimit
FixNamespaceComments: true            # Add closing comments like `// namespace foo` after long namespaces
